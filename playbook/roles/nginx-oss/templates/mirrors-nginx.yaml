apiVersion: v1
kind: Service
metadata:
  annotations:
    meta.helm.sh/release-name: mirrors
    meta.helm.sh/release-namespace: nginx
  labels:
    app.kubernetes.io/instance: mirrors
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: nginx
    app.kubernetes.io/version: 1.16.0
    helm.sh/chart: nginx-0.1.0
  name: mirrors-nginx
  namespace: nginx
spec:
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
  selector:
    app.kubernetes.io/instance: mirrors
    app.kubernetes.io/name: nginx
  sessionAffinity: None
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/instance: mirrors
    app.kubernetes.io/name: nginx
  name: mirrors-nginx
  namespace: nginx
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: mirrors
      app.kubernetes.io/name: nginx
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/instance: mirrors
        app.kubernetes.io/name: nginx
    spec:
      containers:
      - image: nginx:latest
        imagePullPolicy: Always
        name: nginx
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        resources: {}
        securityContext: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/nginx/
          name: nginx-config
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          name: nginx-config
        name: nginx-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: nginx
data:
  nginx.conf: |
    user  nginx;
    worker_processes  auto;
    error_log  /var/log/nginx/error.log notice;
    pid        /var/run/nginx.pid;
    events {
      worker_connections  1024;
    }
    http {
      server {
        listen 80;
        server_name mirrors.onwalk.net;
        autoindex on;
        index index.html index.htm index.nginx-debian.html;
        location / {
          proxy_set_header       Host nginx-s3.oss-cn-shanghai.aliyuncs.com;
          proxy_pass             http://nginx-s3.oss-cn-shanghai.aliyuncs.com;
        }
      }
    }
---
apiVersion: apisix.apache.org/v2
kind: ApisixRoute
metadata:
  name: mirrors
  namespace: nginx
spec:
  http:
    - name: root
      match:
        hosts:
          - mirrors.onwalk.net
        paths:
          - "/"
      backends:
      - serviceName: mirrors-nginx
        servicePort: 80
---
apiVersion: apisix.apache.org/v2
kind: ApisixTls
metadata:
  name: nginx-tls
  namespace: nginx
spec:
  hosts:
  - mirrors.onwalk.net
  secret:
    name: nginx-tls
    namespace: nginx
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app.kubernetes.io/instance: mirrors
    app.kubernetes.io/name: nginx
  name: mirrors-nginx
  namespace: nginx
spec:
  ingressClassName: apisix
  rules:
  - host: mirrors.onwalk.net
    http:
      paths:
      - backend:
          service:
            name: mirrors-nginx
            port:
              number: 80
        path: /
        pathType: ImplementationSpecific
  tls:
  - hosts:
    - mirrors.onwalk.net
    secretName: nginx-tls
